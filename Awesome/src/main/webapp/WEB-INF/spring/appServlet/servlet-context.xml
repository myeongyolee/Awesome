<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	<!-- #5. appServlet관련설정 : servlet-context에 대한 설정 (application당 여러개일 수 있다) -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 이미지, 동영상, js, css파일 등을 제공 -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- /WEB-INF/views/member/member.jsp로 보낸다고 한다면 -->
	<!-- controller에서 member/member로 작성해주면 여기서 나머지 처리를 해서 보내준다 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 스프링 컨테이너에 bean객체 등록 -->
	<!-- 지정한 경로하위의 모든 자바파일중에 @Component클래스를 자동으로 bean으로 등록한다 -->
	<!-- 빈의 이름은 소문자로 시작하는 클래스명이 기본값이다. -->
	<context:component-scan base-package="com.kh.awesome" />
	
	<!-- #8.interceptor등록 -->
	<!-- DispatcherServlet과 Controller의 handler메소드 사이에서 intercept한다. -->
<!--     <interceptors>
		<interceptor>
			<mapping path="/**"/>
			<beans:bean id="loggerInterceptor"
				class="com.kh.spring.common.interceptor.LoggerInterceptor"/>
		</interceptor>
		
		<interceptor>
			<mapping path="/index"/>
			<exclude-mapping path="/board/boardList.do"/>
			<beans:bean id="loginIntercepter"
				class="com.kh.awesome.common.interceptor.LoginInterceptor"/>
		</interceptor>
	</interceptors> -->
	
	<!-- #10.1 파일업로드를 처리할 Resolver클래스 빈등록(빈이름 주의) -->
    <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
        <beans:property name="maxUploadSize" value="10485760" /> <!-- max 파일용량은 10MB이다. -->
        <!-- <property name="defaultEncoding" value="utf-8" /> -->
    </beans:bean>
	
	<!-- #12.1 jsonView Bean 및 viewResolver 등록 -->
	<!-- 요청한 viewName과 실제bean이름을 매핑해주는 BeanNameViewResolver를 사용함. -->
    <!-- bean아이디는 viewResolver로 반드시 지정. 처리순서를 1로 우선처리되도록함. -->
    <beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <beans:property name="order" value="1"/>
    </beans:bean>   
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>
	
	<!--  websocket -->
<!-- 	<websocket:handlers>
		<websocket:mapping handler="echoHandler" path="/echo"/>
		<websocket:handshake-interceptors>
   			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
    	</websocket:handshake-interceptors>

		<websocket:sockjs/>
	</websocket:handlers>
	<beans:bean id="echoHandler" class="com.kh.awesome.util.EchoHandler"/> -->
	
	
	 <!-- #13.1 @Responsebody사용을 위한 의존 : 빈등록 (스프링 5.x.x => MappingJackson2HttpMessageConverter -->
    <beans:bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
    
    <beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <beans:property name="messageConverters">
	        <beans:list>
	            <beans:ref bean="jacksonMessageConverter"/>
	            <beans:bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
	        </beans:list>
        </beans:property>
    </beans:bean>
    
    <!-- naver login -->
    <beans:bean id="naverLoginBO" class="com.kh.awesome.member.model.vo.NaverLoginBO" />
    
   



    
</beans:beans>
